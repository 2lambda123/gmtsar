/***************************************************************************
 * Creator:  David Sandwell                                                *
 *           (Scripps Institution of Oceanography)                         *
 * Date   :  09/23/2015                                                    *
 ***************************************************************************/

/***************************************************************************
 * Modification history:                                                   *
 *                                                                         *
 * DATE                                                                    *
 *                                                                         *
 ***************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include"PRM.h"
#include"lib_functions.h"
#include"stateV.h"
#include"xmlC.h"
#include"lib_defs.h"

//int pop_prm(struct PRM *, tree *, char *);
int pop_led_pre(tree *,state_vector *);
int write_orb(state_vector *sv, FILE *fp, int);

char *USAGE = "\n\nUsage: ext_orb_s1a.c name_of_xml_file name_output\n"
"\nExample: ext_orb_s1a.c S1A_OPER_AUX_POEORB_OPOD_20150615T155109_V20150525T225944_20150527T005944.EOF S1A20140807\n"
"\nOutput: S1A20140807.LED\n";

int main(int argc, char **argv){
    
    FILE *XML_FILE,*INPUT_PRM,*OUTPUT_LED;
    char tmp_str[200];
    struct PRM prm;
    tree xml_tree[60000];
    state_vector sv[200];
    int n;
    
    if (argc < 3) die (USAGE,"");
    // generate the xml tree
    if ((XML_FILE = fopen(argv[1],"r")) == NULL) die("Couldn't open xml file: \n",argv[1]);
    get_tree(XML_FILE,xml_tree);
    //show_tree(xml_tree,0,0);
    fclose(XML_FILE);
    
    // initiate the prm
    //null_sio_struct(&prm);

    // generate the PRM file
    //pop_prm(&prm,xml_tree,argv[3]);
    /*
    strcpy(tmp_str,argv[2]);
    strcat(tmp_str,".PRM");
    if ((OUTPUT_PRM = fopen(tmp_str,"w")) == NULL) die ("Couldn't open prm file: \n",tmp_str);
    put_sio_struct(prm, OUTPUT_PRM);
    fclose(OUTPUT_PRM); 
    */
    
    // generate the LED file
    fprintf(stderr," 6 \n");
    n = pop_led_pre(xml_tree,sv);
    fprintf(stderr," 7 \n");
    
    strcpy(tmp_str,argv[2]);
    strcat(tmp_str,".LED");
    if ((OUTPUT_LED = fopen(tmp_str,"w")) == NULL) die ("Couldn't open led file: \n",tmp_str);
    write_orb(sv,OUTPUT_LED,n);
    fclose(OUTPUT_LED);
    
}

int write_orb(state_vector *sv, FILE *fp, int n){
    int i;
    double dt;
    
    dt = trunc((sv[1].sec)*100.0)/100.0-trunc((sv[0].sec)*100.0)/100.0;
    if(n<=1) return(-1);
    fprintf(fp,"%d %d %d %.3lf %lf \n",n,sv[0].yr,sv[0].jd,sv[0].sec,dt);
    for(i=0;i<n;i++){
        fprintf(fp,"%d %d %.3lf %.6lf %.6lf %.6lf %.8lf %.8lf %.8lf \n",sv[i].yr,sv[i].jd,sv[i].sec,sv[i].x,sv[i].y,sv[i].z,sv[i].vx,sv[i].vy,sv[i].vz);
    }
    return(1);
}

int pop_led_pre(tree *xml_tree,state_vector *sv){
    int i,count;
    char tmp_c[200];
    double tmp_d;
   
    search_tree(xml_tree,"/product/generalAnnotation/orbitList/",tmp_c,3,0,1);
    count = (int)str2double(tmp_c);
    for (i=0;i<count;i++){
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/time/",tmp_c,2,4,i+1);
        tmp_d = str2double(tmp_c);
        sv[i].yr = (int)(trunc(tmp_d/1000.0));
        sv[i].jd = (int)(tmp_d - trunc(tmp_d/1000.0)*1000.0);
        sv[i].sec = (tmp_d - trunc(tmp_d))*86400;
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/position/x/",tmp_c,1,4,i+1);
        sv[i].x = str2double(tmp_c);
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/position/y/",tmp_c,1,4,i+1);
        sv[i].y = str2double(tmp_c);
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/position/z/",tmp_c,1,4,i+1);
        sv[i].z = str2double(tmp_c);
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/velocity/x/",tmp_c,1,4,i+1);
        sv[i].vx = str2double(tmp_c);
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/velocity/y/",tmp_c,1,4,i+1);
        sv[i].vy = str2double(tmp_c);
        search_tree(xml_tree,"/product/generalAnnotation/orbitList/orbit/velocity/z/",tmp_c,1,4,i+1);
        sv[i].vz = str2double(tmp_c);
    }
    printf("%d Lines Written for Orbit...\n",count);
    return(count);
}

